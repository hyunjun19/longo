extends layout

block content
    h1 longo query
    p
        a(href='https://docs.mongodb.com/manual/reference/operator/query/' target='_blank') mongodb query docs
    div#query-container.row
        form#form-query.form-horizontal(onsubmit='return false;')
            div.col-sm-6
                div.form-group
                    label.col-sm-2.control-label(for='phase') phase
                    div.col-sm-10
                        select#phase.form-control(name='phase')
                            each phase in phases
                                option(value=phase.value) #{phase.name}
                div.form-group
                    label.col-sm-2.control-label(for='bucket') bucket
                    div.col-sm-10
                        select#bucket.form-control
                            each bucket in buckets
                                option(value=bucket.value) #{bucket.name}
                div.form-group
                    label.col-sm-2.control-label(for='limit') limit
                    div.col-sm-10
                        input#limit.form-control(type='text' value=20)
                div.form-group
                    label.col-sm-2.control-label(for='q') query
                    div.col-sm-10
                        textarea#q.form-control(rows='3' style='width:100%;') {}
                button#btn-query.btn.btn-primary.btn-block query
            div.col-sm-6
                div.form-group
                    label.col-sm-2.control-label(for='query-field') field
                    div.col-sm-10
                        input#query-field.form-control(type='text' name='field' placeholder='field')
                div.form-group
                    label.col-sm-2.control-label(for='query-condition') condition
                    div.col-sm-10
                        select#query-condition.form-control(name='condition')
                            option(value='$eq')    =
                            option(value='$gt')    >
                            option(value='$gte')   >=
                            option(value='$lt')    <
                            option(value='$lte')   <=
                            option(value='$ne')    !=
                            option(value='$in')    Array IN
                            option(value='$nin')   Array NOT IN
                            option(value='$regex') LIKE(regex)
                div.form-group
                    label.col-sm-2.control-label(for='query-value') value
                    div.col-sm-10
                        input#query-value.form-control(type='text' name='value' placeholder='value')
                div.form-group
                    label.col-sm-2.control-label(for='c') column
                    div.col-sm-10
                        textarea#c.form-control(rows='3' style='width:100%;') {}
                button#btn-query-condition-add.btn.btn-default.btn-block apply
    div#result-container.row
        fieldset#res
            legend result
            div(data-ax5grid='result-grid' data-ax5grid-config='{}' style='height:500px;')

    script(type='text/javascript').
        $(function(){
            var resultGrid = new ax5.ui.grid();
            initResultGrid();

            ax5.ui.grid.formatter['json'] = function () {
                if (_.isEmpty(this.value)) return this.value;

                return JSON.stringify(this.value);
            };

            function initResultGrid(dynamicColumns) {
                resultGrid.setConfig({
                    showLineNumber: true,
                    target: $('[data-ax5grid="result-grid"]'),
                    columns: dynamicColumns || [{ key: 'dummy', label: 'dummy' }]
                });
            }

            $('#btn-query-condition-add').click(function(e){
                e.preventDefault();

                var $q = $('#q');
                var queryField = $('#query-field').val();
                var queryCondition = $('#query-condition').val();
                var queryValue = $('#query-value').val();

                if (_.isEmpty(queryField) || _.isEmpty(queryValue)) {
                    alert('field and value is require.');
                    return;
                }

                var q = {};
                try {
                    q = JSON.parse($q.val() || '{}');
                } catch(ex) {
                    console.error('#q JSON.parse fail.', ex);
                }

                q[queryField] = {};
                q[queryField][queryCondition] = queryValue;

                $q.val(JSON.stringify(q, null, 4));
            });

            $('#btn-query').click(function(){
                var phase  = $('#phase').val();
                var bucket = $('#bucket').val();
                if (_.isEmpty(phase) || _.isEmpty(bucket)) {
                    alert('select phase and bucket.');
                    return;
                }

                var url = '/log/' + phase + '/' + bucket;
                var data = {
                    q: $('#q').val(),
                    c: $('#c').val(),
                    limit: $('#limit').val()
                };
                $.get(url, data, function(res){
                    location.href = '#res';

                    if (_.isEmpty(res)) {
                        initResultGrid();
                        resultGrid.setData([]);
                        return;
                    }

                    var dynamicColumns = _.map(res[0], function(val, key){
                        return { 'key': key, 'label': key, 'formatter': 'json' };
                    });
                    initResultGrid(dynamicColumns);
                    resultGrid.setData(res);
                }).fail(function(res){
                    location.href = '#res';
                    initResultGrid([{ key: 'error', label: 'error' }]);
                    resultGrid.setData([ { error: res } ]);
                });
            });
        });