extends layout

block content
    h1 longo query
    div(id='query-container')
        button(id='btn-query' style='font-size:1.2em;') query
        form(id='form-query')
            fieldset
                legend scheme
                label phase:
                    select#phase(name='phase')
                        each phase in phases
                            option(value=phase.value) #{phase.name}
                label bucket:
                    select#bucket
                        each bucket in buckets
                            option(value=bucket.value) #{bucket.name}
                label limit:
                    input(id='limit' type='text' value=20)
            fieldset
                legend query
                input#query-field(type='text' name='field' placeholder='field')
                select#query-condition(name='condition')
                    option(value='$eq')  =
                    option(value='$gt')  >
                    option(value='$gte') >=
                    option(value='$lt')  <
                    option(value='$lte') <=
                    option(value='$ne')  !=
                    option(value='$in')  Array IN
                    option(value='$nin') Array NOT IN
                input#query-value(type='text' name='value' placeholder='value')
                button#btn-query-condition-add add
                hr
                textarea(id='q') {}
            fieldset
                legend column
                textarea(id='c') {}
    div(id='result-container')
        fieldset#res
            legend result
            div(data-ax5grid='result-grid' data-ax5grid-config='{}' style='height:500px;')

    script(type='text/javascript').
        $(function(){
            var resultGrid = new ax5.ui.grid();
            initResultGrid();

            function initResultGrid(dynamicColumns) {
                resultGrid.setConfig({
                    target: $('[data-ax5grid="result-grid"]'),
                    columns: dynamicColumns || [{ key: 'dummy', label: 'dummy' }]
                });
            }

            $('#btn-query-condition-add').click(function(e){
                e.preventDefault();

                var $q = $('#q');
                var queryField = $('#query-field').val();
                var queryCondition = $('#query-condition').val();
                var queryValue = $('#query-value').val();

                if (_.isEmpty(queryField) || _.isEmpty(queryValue)) {
                    alert('field and value is require.');
                    return;
                }

                var q = {};
                try {
                    q = JSON.parse($q.val() || '{}');
                } catch(ex) {
                    console.error('#q JSON.parse fail.', ex);
                }

                q[queryField] = {};
                q[queryField][queryCondition] = queryValue;

                $q.val(JSON.stringify(q, null, 4));
            });

            $('#btn-query').click(function(){
                var phase  = $('#phase').val();
                var bucket = $('#bucket').val();
                if (_.isEmpty(phase) || _.isEmpty(bucket)) {
                    alert('select phase and bucket.');
                    return;
                }

                var url = '/log/' + phase + '/' + bucket;
                var data = {
                    q: $('#q').val(),
                    c: $('#c').val(),
                    limit: $('#limit').val()
                };
                $.get(url, data, function(res){
                    location.href = '#res';

                    if (_.isEmpty(res)) {
                        initResultGrid();
                        resultGrid.setData([]);
                        return;
                    }

                    var dynamicColumns = _.map(res[0], function(val, key){
                        return { 'key': key, 'label': key };
                    });
                    initResultGrid(dynamicColumns);
                    resultGrid.setData(res);
                }).fail(function(res){
                    location.href = '#res';
                    initResultGrid([{ key: 'error', label: 'error' }]);
                    resultGrid.setData([ { error: res } ]);
                });
            });
        });